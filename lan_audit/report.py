from __future__ import annotations
import json
import os
from typing import List, Dict, Any
from .utils import now_iso, ensure_dir
from .scanner import HostResult
from dataclasses import asdict

HTML_TEMPLATE = """<!doctype html>
<html lang="en"><head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>LAN Audit Report</title>
<style>
 body{font-family:ui-sans-serif,system-ui,Segoe UI,Roboto,Arial,sans-serif;background:#0b1220;color:#e5e7eb;margin:0;padding:24px}
 .wrap{max-width:1200px;margin:0 auto}
 h1{font-size:24px;margin:0 0 12px}
 .meta{font-size:13px;color:#9ca3af;margin-bottom:20px}
 table{width:100%;border-collapse:collapse;background:#0f172a;border-radius:8px;overflow:hidden}
 th,td{padding:10px 12px;border-bottom:1px solid #1f2937;vertical-align:top}
 th{background:#111827;text-align:left;font-weight:600}
 .ip{font-family:ui-monospace,Menlo,Consolas,monospace}
 .tag{display:inline-block;padding:2px 6px;border-radius:4px;font-size:12px;margin-right:6px}
 .up{background:#065f46} .down{background:#7f1d1d}
 .port{font-family:ui-monospace,Menlo,Consolas,monospace;background:#1f2937;border-radius:4px;padding:0 6px}
 .banner{white-space:pre-wrap;max-height:8rem;overflow:auto;background:#111827;padding:8px;border-radius:6px}
 .foot{color:#6b7280;font-size:12px;margin-top:16px}
</style></head><body><div class="wrap">
<h1>LAN Audit Report</h1>
<div class="meta">
  <div><b>Target:</b> {target}</div>
  <div><b>Generated:</b> {when}</div>
  <div><b>Workers:</b> {workers} · <b>Ports:</b> {portsn}</div>
</div>
<table>
<thead>
<tr>
 <th>IP</th>
 <th>Status</th>
 <th>TTL / OS Guess</th>
 <th>Open Ports</th>
 <th>Banners</th>
</tr>
</thead>
<tbody>
{rows}
</tbody>
</table>
<div class="foot">Generated by LAN Audit · Non-intrusive discovery and TCP connect scan.</div>
</div></body></html>
"""

def row_for_host(h: HostResult) -> str:
    status = f'<span class="tag {"up" if h.alive else "down"}">{"alive" if h.alive else "down"}</span>'
    ttlos = f"{h.ttl or '—'} / {h.os_guess}"
    if h.ports:
        ports = " ".join(f'<span class="port">{p.port}</span>' for p in h.ports)
        banners = "<hr/>".join(
            f"<b>{p.port} ({p.service_guess})</b><div class='banner'>{(p.banner or '—').replace('<','&lt;')}</div>"
            for p in h.ports
        )
    else:
        ports = "—"
        banners = "—"
    return f"<tr><td class='ip'>{h.ip}</td><td>{status}</td><td>{ttlos}</td><td>{ports}</td><td>{banners}</td></tr>"

def write_reports(target: str,
                  hosts: List[HostResult],
                  out_dir: str,
                  workers: int,
                  ports_used: List[int],
                  formats: str = "json") -> Dict[str, str]:
    ensure_dir(out_dir)
    when = now_iso()

    # JSON
    json_path = os.path.join(out_dir, "report.json")
    data: Dict[str, Any] = {
        "scan": {
            "target": target,
            "generated": when,
            "workers": workers,
            "ports": ports_used,
        },
        "hosts": [asdict(h) for h in hosts],
    }
    with open(json_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    paths = {"json": json_path}

    if formats in ("html", "both"):
        rows = "\n".join(row_for_host(h) for h in hosts)
        html = HTML_TEMPLATE.format(
            target=target, when=when, workers=workers,
            portsn=len(ports_used), rows=rows
        )
        html_path = os.path.join(out_dir, "report.html")
        with open(html_path, "w", encoding="utf-8") as f:
            f.write(html)
        paths["html"] = html_path

    return paths
