import datetime as _dt
import json
import os
from typing import Any, Dict, List

HTML_TEMPLATE = """<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>LAN Audit Report</title>
<meta name="viewport" content="width=device-width,initial-scale=1">
<style>
:root {
  --bg:#0f172a; --fg:#e5e7eb; --muted:#94a3b8; --acc:#22d3ee; --ok:#10b981; --warn:#f59e0b; --bad:#ef4444;
}
*{box-sizing:border-box} body{margin:0;font-family:Inter,system-ui,Segoe UI,Roboto,Arial;background:var(--bg);color:var(--fg)}
.container{max-width:1200px;margin:40px auto;padding:0 16px}
h1{font-size:1.8rem;margin:0 0 8px}
h2{font-size:1.2rem;color:var(--muted);margin:0 0 24px}
.card{background:rgba(255,255,255,.04);border:1px solid rgba(255,255,255,.08);border-radius:10px;padding:16px;margin:12px 0}
.badge{display:inline-block;padding:.2rem .5rem;border-radius:6px;background:rgba(255,255,255,.08);border:1px solid rgba(255,255,255,.1);margin-right:6px}
.badge.ok{border-color:var(--ok);color:var(--ok)} .badge.bad{border-color:var(--bad);color:var(--bad)} .badge.warn{border-color:var(--warn);color:var(--warn)}
table{width:100%;border-collapse:collapse;margin-top:8px}
th,td{padding:8px 10px;border-bottom:1px solid rgba(255,255,255,.08);vertical-align:top}
th{position:sticky;top:0;background:rgba(15,23,42,.9);backdrop-filter:saturate(180%) blur(8px);text-align:left}
.search{width:100%;padding:10px;border-radius:8px;border:1px solid rgba(255,255,255,.1);background:rgba(255,255,255,.06);color:var(--fg);outline:none}
.small{color:var(--muted);font-size:.9rem}
.code{font-family:ui-monospace, Menlo, Consolas, monospace;white-space:pre-wrap;word-break:break-word}
.port-pill{display:inline-block;margin:2px 4px;padding:2px 6px;border-radius:999px;border:1px solid rgba(255,255,255,.1);font-size:.85rem}
.port-open{border-color:var(--ok);color:var(--ok)}
.port-closed{border-color:var(--bad);color:var(--bad)}
.port-filtered{border-color:var(--warn);color:var(--warn)}
.footer{margin:24px 0;color:var(--muted);font-size:.85rem}
</style>
</head>
<body>
<div class="container">
  <h1>LAN Audit Report</h1>
  <h2 class="small" id="meta"></h2>

  <div class="card">
    <div id="summary"></div>
  </div>

  <div class="card">
    <input class="search" id="q" placeholder="Filter by IP/Hostname/Port/Service/Banner…">
    <table>
      <thead>
        <tr>
          <th style="width:18%">Host</th>
          <th style="width:12%">Alive?</th>
          <th style="width:15%">Ports</th>
          <th>Details</th>
        </tr>
      </thead>
      <tbody id="tbody"></tbody>
    </table>
  </div>

  <div class="footer">Generated by lan-audit</div>
</div>
<script id="data" type="application/json"></script>
<script>
const data = JSON.parse(document.getElementById('data').textContent);
const meta = document.getElementById('meta');
const tbody = document.getElementById('tbody');
const summary = document.getElementById('summary');
const q = document.getElementById('q');

meta.textContent = `${data.metadata.start_time} • nets: ${data.metadata.networks.join(', ')} • ports: ${data.summary.scanned_ports.join(', ')}`;

function renderSummary(d){
  summary.innerHTML = `
    <span class="badge">Hosts: ${d.total_hosts}</span>
    <span class="badge ok">Alive (likely): ${d.alive_hosts}</span>
    <span class="badge ok">Open: ${d.open_counts}</span>
    <span class="badge bad">Closed: ${d.closed_counts}</span>
    <span class="badge warn">Filtered: ${d.filtered_counts}</span>
    <span class="badge">Duration: ${data.metadata.duration_s}s</span>
  `;
}

function portPill(p){
  const cls = p.status === 'open' ? 'port-open' : p.status === 'filtered' ? 'port-filtered' : 'port-closed';
  const svc = p.service_guess ? `/${p.service_guess}` : '';
  return `<span class="port-pill ${cls}">${p.port}${svc}</span>`;
}

function rowHTML(h){
  const host = h.hostname ? `${h.ip} <span class="small">(${h.hostname})</span>` : h.ip;
  const alive = h.alive_likely ? '<span class="badge ok">Yes</span>' : '<span class="badge">Unknown</span>';
  const ports = h.ports.map(portPill).join(' ');
  const details = h.ports
    .filter(p => (p.banner && p.banner.trim()) || p.status === 'open')
    .map(p => {
      const b = p.banner ? `<div class="code small">${p.banner}</div>` : '';
      const svc = p.service_guess ? ` (${p.service_guess})` : '';
      return `<div><strong>${h.ip}:${p.port}${svc}</strong> — <em>${p.status}</em>${b}</div>`;
    })
    .join('');
  return `<tr><td>${host}</td><td>${alive}</td><td>${ports}</td><td>${details || '<span class="small">No details</span>'}</td></tr>`;
}

let allRows = data.hosts;

function render(filter=''){
  const f = filter.toLowerCase();
  const items = !f ? allRows : allRows.filter(h => {
    const hay = [
      h.ip, h.hostname || '',
      ...h.ports.map(p => String(p.port)),
      ...h.ports.map(p => p.service_guess || ''),
      ...h.ports.map(p => (p.banner||''))
    ].join(' ').toLowerCase();
    return hay.includes(f);
  });
  tbody.innerHTML = items.map(rowHTML).join('');
}

q.addEventListener('input', e => render(e.target.value));

renderSummary(data.summary);
render();
</script>
</body>
</html>
"""

def write_reports(base_dir: str, json_data: Dict[str, Any]) -> Dict[str, str]:
    os.makedirs(base_dir, exist_ok=True)
    ts = _dt.datetime.now().strftime("%Y%m%d-%H%M%S")

    json_path = os.path.join(base_dir, f"lan-audit-{ts}.json")
    html_path = os.path.join(base_dir, f"lan-audit-{ts}.html")

    # Embed metadata json into HTML
    meta = json_data.copy()
    with open(json_path, "w", encoding="utf-8") as f:
        json.dump(meta, f, ensure_ascii=False, indent=2)

    html = HTML_TEMPLATE.replace(
        '<script id="data" type="application/json"></script>',
        '<script id="data" type="application/json">' + 
        json.dumps(meta, ensure_ascii=False) + '</script>'
    )
    with open(html_path, "w", encoding="utf-8") as f:
        f.write(html)

    return {"json": json_path, "html": html_path}
